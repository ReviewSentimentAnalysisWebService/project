{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev_React\\\\project\\\\front-end\\\\src\\\\view\\\\DetailPage\\\\Sections\\\\PieChart.js\";\nimport React from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport { Card, CardHeader, CardContent, IconButton, Divider, Typography } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { Grid } from \"@material-ui/core\";\nimport { connect } from 'react-redux';\nimport productStore from 'store/modules/productStore';\nimport { changeCurrentKeyword, changeCurrentProduct, changeCategory } from 'store/modules/productStore';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%'\n  },\n  chartContainer: {\n    position: 'relative',\n    height: '300px'\n  },\n  stats: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  device: {\n    textAlign: 'center',\n    padding: theme.spacing(1)\n  },\n  deviceIcon: {\n    color: theme.palette.icon\n  }\n}));\n\nconst PieChart = props => {\n  const {\n    className,\n    ...rest\n  } = props;\n  const classes = useStyles();\n  const theme = useTheme(); //console.log(\"labeldata    -> \" + props.graphData.labels);\n  // console.log(\"graphData    -> \" + JSON.stringify(props.graphData));\n  // console.log(\"currentProduct    -> \" + props.CurrentProduct);\n\n  let titleString = props.CurrentProduct + \"'s Keyword\";\n  const options = {\n    legend: {\n      display: true\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: false,\n    cutoutPercentage: 80,\n    layout: {\n      padding: 0\n    },\n    tooltips: {\n      enabled: true,\n      mode: 'index',\n      intersect: false,\n      borderWidth: 1,\n      borderColor: theme.palette.divider,\n      backgroundColor: theme.palette.white,\n      titleFontColor: theme.palette.text.primary,\n      bodyFontColor: theme.palette.text.secondary,\n      footerFontColor: theme.palette.text.secondary\n    }\n  };\n  const {\n    changeCurrentKeyword\n  } = props;\n  const data = props.graphData;\n  const keywords = props.graphData.labels;\n\n  const keywordClick = keyword => {\n    changeCurrentKeyword(keyword);\n    console.log(\"changeCurrentKeyword\", props.CurrentKeyword);\n  };\n\n  return /*#__PURE__*/React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(CardHeader, {\n    action: /*#__PURE__*/React.createElement(IconButton, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(RefreshIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    })),\n    title: titleString,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.chartContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Doughnut, {\n    data: data,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 14\n    }\n  }, \"Click Keyword \")), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.stats,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, keywords.map(keyword => /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    fullWidth: \"true\",\n    color: \"primary\",\n    onClick: () => keywordClick(keyword),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, keyword)))))));\n};\n\nPieChart.propTypes = {\n  className: PropTypes.string\n};\n\nconst mapStateToProps = ({\n  productStore\n}) => ({\n  //2\n  CurrentProduct: productStore.CurrentProduct,\n  graphData: productStore.graphData,\n  CurrentKeyword: productStore.CurrentKeyword\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct)),\n    changeCurrentKeyword: CurrentKeyword => dispatch(changeCurrentKeyword(CurrentKeyword))\n  };\n};\n\nexport default connect( // 스토어와 연결\nmapStateToProps, mapDispatchToProps)(PieChart);","map":{"version":3,"sources":["C:/dev_React/project/front-end/src/view/DetailPage/Sections/PieChart.js"],"names":["React","Doughnut","clsx","PropTypes","makeStyles","useTheme","Button","Card","CardHeader","CardContent","IconButton","Divider","Typography","RefreshIcon","Grid","connect","productStore","changeCurrentKeyword","changeCurrentProduct","changeCategory","useStyles","theme","root","height","chartContainer","position","stats","marginTop","spacing","display","justifyContent","device","textAlign","padding","deviceIcon","color","palette","icon","PieChart","props","className","rest","classes","titleString","CurrentProduct","options","legend","responsive","maintainAspectRatio","animation","cutoutPercentage","layout","tooltips","enabled","mode","intersect","borderWidth","borderColor","divider","backgroundColor","white","titleFontColor","text","primary","bodyFontColor","secondary","footerFontColor","data","graphData","keywords","labels","keywordClick","keyword","console","log","CurrentKeyword","map","propTypes","string","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  IconButton,\r\n  Divider,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { connect } from 'react-redux';\r\nimport productStore from 'store/modules/productStore';\r\nimport { changeCurrentKeyword, changeCurrentProduct, changeCategory } from 'store/modules/productStore';\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    height: '100%'\r\n  },\r\n  chartContainer: {\r\n    position: 'relative',\r\n    height: '300px'\r\n  },\r\n  stats: {\r\n    marginTop: theme.spacing(2),\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n  },\r\n  device: {\r\n    textAlign: 'center',\r\n    padding: theme.spacing(1)\r\n  },\r\n  deviceIcon: {\r\n    color: theme.palette.icon\r\n  }\r\n}));\r\n\r\nconst PieChart = props => {\r\n  const { className, ...rest } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n\r\n  //console.log(\"labeldata    -> \" + props.graphData.labels);\r\n  // console.log(\"graphData    -> \" + JSON.stringify(props.graphData));\r\n  // console.log(\"currentProduct    -> \" + props.CurrentProduct);\r\n\r\n  let titleString = props.CurrentProduct + \"'s Keyword\";\r\n\r\n  const options = {\r\n    legend: {\r\n      display: true\r\n    },\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    animation: false,\r\n    cutoutPercentage: 80,\r\n    layout: { padding: 0 },\r\n\r\n    tooltips: {\r\n      enabled: true,\r\n      mode: 'index',\r\n      intersect: false,\r\n      borderWidth: 1,\r\n      borderColor: theme.palette.divider,\r\n      backgroundColor: theme.palette.white,\r\n      titleFontColor: theme.palette.text.primary,\r\n      bodyFontColor: theme.palette.text.secondary,\r\n      footerFontColor: theme.palette.text.secondary\r\n    },\r\n\r\n  };\r\n  const { changeCurrentKeyword } = props;\r\n  const data = props.graphData;\r\n  const keywords = props.graphData.labels;\r\n\r\n  const keywordClick = (keyword) => {\r\n    changeCurrentKeyword(keyword);\r\n    console.log(\"changeCurrentKeyword\", props.CurrentKeyword);\r\n  }\r\n\r\n  return (\r\n    <Card\r\n      {...rest}\r\n      className={clsx(classes.root, className)}\r\n    >\r\n      <CardHeader\r\n        action={\r\n          <IconButton size=\"small\">\r\n            <RefreshIcon />\r\n          </IconButton>\r\n        }\r\n        title={titleString}\r\n      />\r\n      <Divider />\r\n      <CardContent>\r\n        <div className={classes.chartContainer}>\r\n          <Doughnut\r\n            data={data}\r\n            options={options}\r\n\r\n          />\r\n        </div>\r\n        <div><p>Click Keyword </p></div>\r\n        <div className={classes.stats}>\r\n          <Grid container spacing={1}>\r\n            {keywords.map(keyword => (\r\n              <Grid item xs={12} sm={3}>\r\n                <Button variant=\"outlined\" fullWidth='true' color=\"primary\" onClick={() => keywordClick(keyword)} >{keyword}</Button>\r\n              </Grid>\r\n\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n\r\n        {/* <div><p>Click Keyword </p></div>\r\n        <div className={classes.stats}>\r\n\r\n          <Grid container spacing={1}>\r\n            {devices.map(device => (\r\n              <Grid item xs={12} sm={3}>\r\n                <Button variant=\"outlined\" fullWidth='true' color=\"primary\" onClick={() => keywordClick(device.title)} >{device.title}</Button>\r\n              </Grid>\r\n\r\n            ))}\r\n          </Grid>\r\n        </div> */}\r\n\r\n      </CardContent>\r\n    </Card >\r\n  );\r\n};\r\n\r\nPieChart.propTypes = {\r\n  className: PropTypes.string\r\n};\r\nconst mapStateToProps = ({ productStore }) => ({  //2\r\n  CurrentProduct: productStore.CurrentProduct,\r\n  graphData: productStore.graphData,\r\n  CurrentKeyword: productStore.CurrentKeyword,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct)),\r\n    changeCurrentKeyword: CurrentKeyword => dispatch(changeCurrentKeyword(CurrentKeyword)),\r\n  }\r\n};\r\n\r\nexport default connect( // 스토어와 연결\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(PieChart);\r\n\r\n"]},"metadata":{},"sourceType":"module"}