{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev_React\\\\project\\\\front-end\\\\src\\\\components\\\\Search\\\\SearchPrice.js\";\nimport React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from 'react-redux';\nimport { search_min, search_max } from 'store/modules/productStore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nexport const SearchPrice = props => {\n  let min = useSelector(state => state.Searchmin);\n  let max = useSelector(state => state.Searchmax); // , 를 제거하는 순서 \n\n  function replaceCommas(n) {\n    return n.splite(',').join('');\n  }\n\n  function numberWithCommas(x) {\n    if (x) {\n      return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n  }\n\n  const dispatch = useDispatch();\n  const useStyles = makeStyles(theme => ({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n        width: '25ch'\n      }\n    }\n  }));\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.root,\n    noValidate: true,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"standard-secondary\",\n    label: \"\\uCD5C\\uC18C \\uAE08\\uC561\",\n    color: \"secondary\",\n    value: numberWithCommas(min),\n    onChange: e => dispatch(search_min(replaceCommas(e.target.value))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    id: \"standard-secondary\",\n    label: \"\\uCD5C\\uB300 \\uAE08\\uC561\",\n    color: \"secondary\",\n    value: max,\n    onChange: e => dispatch(search_max(e.target.value)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }))) // <form>\n  //     <input type=\"text\" placeholder=\"search..\"\n  //         value={keyword} onChange={(e) => dispatch(search_keyword(e.target.value))}></input>\n  // </form>\n  ;\n};\n\nconst mapStateToProps = ({\n  productStore\n}) => ({\n  //2\n  SearchMin: productStore.SearchMin,\n  SearchMax: productStore.SearchMax\n}); //import store name이 맞는거다\n//props로 넣어줄 액션 생성함수\n\n\nconst mapDispatchToProps = dispatch => ({\n  search_min: SearchMin => dispatch(search_min(SearchMin)),\n  search_max: SearchMax => dispatch(search_max(SearchMax))\n});\n\nexport default connect( // 스토어와 연결\nmapStateToProps, mapDispatchToProps)(SearchPrice); //export const search_Price = SearchMinMax => ({ type: SEARCH_PRICE, SearchMinMax });","map":{"version":3,"sources":["C:/dev_React/project/front-end/src/components/Search/SearchPrice.js"],"names":["React","useDispatch","useSelector","connect","search_min","search_max","makeStyles","TextField","SearchPrice","props","min","state","Searchmin","max","Searchmax","replaceCommas","n","splite","join","numberWithCommas","x","toString","replace","dispatch","useStyles","theme","root","margin","spacing","width","classes","e","target","value","mapStateToProps","productStore","SearchMin","SearchMax","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { connect } from 'react-redux';\r\nimport { search_min, search_max } from 'store/modules/productStore';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nexport const SearchPrice = (props) => {\r\n    let min = useSelector(state => state.Searchmin);\r\n    let max = useSelector(state => state.Searchmax);\r\n    // , 를 제거하는 순서 \r\n\r\n    function replaceCommas(n) {\r\n        return n.splite(',').join('');\r\n    }\r\n    function numberWithCommas(x) {\r\n        if (x) {\r\n            return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n        }\r\n    }\r\n    const dispatch = useDispatch();\r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n            '& > *': {\r\n                margin: theme.spacing(1),\r\n                width: '25ch',\r\n            },\r\n        },\r\n    }));\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n            <form className={classes.root} noValidate autoComplete=\"off\">\r\n                <TextField id=\"standard-secondary\" label=\"최소 금액\" color=\"secondary\" value={numberWithCommas(min)} onChange={(e) => dispatch(search_min(replaceCommas(e.target.value)))} />\r\n                <a></a>\r\n                <TextField id=\"standard-secondary\" label=\"최대 금액\" color=\"secondary\" value={max} onChange={(e) => dispatch(search_max(e.target.value))} />\r\n            </form>\r\n        </div>\r\n        // <form>\r\n        //     <input type=\"text\" placeholder=\"search..\"\r\n        //         value={keyword} onChange={(e) => dispatch(search_keyword(e.target.value))}></input>\r\n        // </form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ productStore }) => ({  //2\r\n\r\n    SearchMin: productStore.SearchMin,\r\n    SearchMax: productStore.SearchMax,\r\n});\r\n//import store name이 맞는거다\r\n\r\n//props로 넣어줄 액션 생성함수\r\nconst mapDispatchToProps = dispatch => ({\r\n    search_min: SearchMin => dispatch(search_min(SearchMin)),\r\n    search_max: SearchMax => dispatch(search_max(SearchMax)),\r\n});\r\n\r\nexport default connect( // 스토어와 연결\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(SearchPrice);\r\n//export const search_Price = SearchMinMax => ({ type: SEARCH_PRICE, SearchMinMax });"]},"metadata":{},"sourceType":"module"}