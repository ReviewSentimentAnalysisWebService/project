{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev_React\\\\project\\\\front-end\\\\src\\\\components\\\\Pagination\\\\PaginationProductList.js\";\nimport React, { useState, useEffect, useSelector } from 'react';\nimport Posts from './Posts';\nimport PaginationPage from './PaginationPage';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport productStore from 'store/modules/productStore';\nimport { changeProductList, changeCurrentProduct } from 'store/modules/productStore';\nimport ApiService from \"ApiService\";\nimport SearchBar from 'components/Search/SearchBar';\n\nconst PaginationProductList = props => {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(12);\n\n  const fetchPosts = () => {\n    setPosts(props.list);\n    setCurrentPage(1);\n  };\n\n  useEffect(() => {\n    fetchPosts();\n    console.log(\"useEffect\", currentPage); //변화를 감지하거나, 컴포넌트를 부를때 마다 실행 즉 화면이 바뀌면 한번은 실행하게된다. \n  }, [props.list]); // Get current posts\n\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const test = posts.filter(posts => posts.name.toLowerCase().indexOf(props.searchKeyword.toLowerCase()) >= 0);\n  console.log(\"test\", test);\n  const currentPosts = test.slice(indexOfFirstPost, indexOfLastPost); //일단 서치바로 한번 거른다음에 페이지네이션 시킨다.!!!!!!\n  // , 를 제거하는 순서 \n\n  const replacePrice = posts.map(posts => ({ ...posts,\n    price: posts.price.split(',').join('')\n  }));\n  console.log(\"1234123\", replacePrice);\n  const moneyFilter = replacePrice.filter(replacePrice => replacePrice.price >= 50000);\n  console.log(\"money\", moneyFilter);\n  const turn = replacePrice.map(replacePrice => ({ ...replacePrice,\n    price: numberWithCommas(replacePrice.price)\n  }));\n\n  function numberWithCommas(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  } // Change page\n\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-primary mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \"Hello, World!\"), /*#__PURE__*/React.createElement(SearchBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Posts, {\n    posts: currentPosts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PaginationPage, {\n    postsPerPage: postsPerPage,\n    totalPosts: posts.length,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = ({\n  productStore\n}) => ({\n  //2\n  category: productStore.category,\n  list: productStore.productList,\n  CurrentProduct: productStore.CurrentProduct,\n  searchKeyword: productStore.searchKeyword\n}); //import store name이 맞는거다\n//props로 넣어줄 액션 생성함수\n\n\nconst mapDispatchToProps = dispatch => ({\n  changeProductList: list => dispatch(changeProductList(list)),\n  changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct))\n});\n\nexport default connect( // 스토어와 연결\nmapStateToProps, mapDispatchToProps)(PaginationProductList); // 흔적 \n// const t = posts.filter(posts => posts.price = parseInt(posts.price.replace(\",\", \"\")));\n// const t = posts.filter(posts => posts.price.split(',').join('') >= 0);\n// console.log(\"왜 , 가 안사라지냐\", t);\n// String.split(,).join(‘’)\n//const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n// const q = posts.map(post => post.price = parseInt(post.price.split(',').join('')));\n// console.log(\"1234123\", q);\n// const p = posts.filter(posts => posts.map(post => post.price = parseInt(post.price.split(',').join(''))) >= 1);\n// console.log(\"1234123\", p);\n// const p = posts.map(post => post.price = post.price.split(',').join(''));\n// console.log(\"1234123\", p);","map":{"version":3,"sources":["C:/dev_React/project/front-end/src/components/Pagination/PaginationProductList.js"],"names":["React","useState","useEffect","useSelector","Posts","PaginationPage","axios","connect","productStore","changeProductList","changeCurrentProduct","ApiService","SearchBar","PaginationProductList","props","posts","setPosts","loading","setLoading","currentPage","setCurrentPage","postsPerPage","fetchPosts","list","console","log","indexOfLastPost","indexOfFirstPost","test","filter","name","toLowerCase","indexOf","searchKeyword","currentPosts","slice","replacePrice","map","price","split","join","moneyFilter","turn","numberWithCommas","x","toString","replace","paginate","pageNumber","length","mapStateToProps","category","productList","CurrentProduct","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useSelector } from 'react';\r\nimport Posts from './Posts';\r\n\r\nimport PaginationPage from './PaginationPage';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport productStore from 'store/modules/productStore';\r\nimport { changeProductList, changeCurrentProduct } from 'store/modules/productStore';\r\nimport ApiService from \"ApiService\";\r\nimport SearchBar from 'components/Search/SearchBar';\r\nconst PaginationProductList = (props) => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [postsPerPage] = useState(12);\r\n\r\n  const fetchPosts = () => {\r\n    setPosts(props.list);\r\n    setCurrentPage(1);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchPosts();\r\n\r\n    console.log(\"useEffect\", currentPage);\r\n    //변화를 감지하거나, 컴포넌트를 부를때 마다 실행 즉 화면이 바뀌면 한번은 실행하게된다. \r\n  }, [props.list]);\r\n\r\n\r\n\r\n  // Get current posts\r\n  const indexOfLastPost = currentPage * postsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n\r\n  const test = posts.filter(posts => posts.name.toLowerCase().indexOf(props.searchKeyword.toLowerCase()) >= 0);\r\n  console.log(\"test\", test);\r\n  const currentPosts = test.slice(indexOfFirstPost, indexOfLastPost);\r\n  //일단 서치바로 한번 거른다음에 페이지네이션 시킨다.!!!!!!\r\n\r\n  // , 를 제거하는 순서 \r\n  const replacePrice = posts.map(posts => ({ ...posts, price: posts.price.split(',').join('') }));\r\n  console.log(\"1234123\", replacePrice);\r\n  const moneyFilter = replacePrice.filter(replacePrice => replacePrice.price >= 50000);\r\n  console.log(\"money\", moneyFilter);\r\n\r\n  const turn = replacePrice.map(replacePrice => ({ ...replacePrice, price: numberWithCommas(replacePrice.price) }))\r\n\r\n  function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n\r\n  // Change page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (\r\n    <div className='container mt-5'>\r\n      <h1 className='text-primary mb-3'>Hello, World!</h1>\r\n      <SearchBar />\r\n      <Posts posts={currentPosts} />\r\n      <PaginationPage\r\n        postsPerPage={postsPerPage}\r\n        totalPosts={posts.length}\r\n        paginate={paginate}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ productStore }) => ({  //2\r\n  category: productStore.category,\r\n  list: productStore.productList,\r\n  CurrentProduct: productStore.CurrentProduct,\r\n  searchKeyword: productStore.searchKeyword,\r\n});\r\n//import store name이 맞는거다\r\n\r\n//props로 넣어줄 액션 생성함수\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeProductList: list => dispatch(changeProductList(list)),\r\n  changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct)),\r\n});\r\n\r\nexport default connect( // 스토어와 연결\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(PaginationProductList);\r\n\r\n\r\n\r\n  // 흔적 \r\n  // const t = posts.filter(posts => posts.price = parseInt(posts.price.replace(\",\", \"\")));\r\n  // const t = posts.filter(posts => posts.price.split(',').join('') >= 0);\r\n  // console.log(\"왜 , 가 안사라지냐\", t);\r\n\r\n  // String.split(,).join(‘’)\r\n\r\n  //const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n  // const q = posts.map(post => post.price = parseInt(post.price.split(',').join('')));\r\n  // console.log(\"1234123\", q);\r\n\r\n\r\n  // const p = posts.filter(posts => posts.map(post => post.price = parseInt(post.price.split(',').join(''))) >= 1);\r\n  // console.log(\"1234123\", p);\r\n\r\n  // const p = posts.map(post => post.price = post.price.split(',').join(''));\r\n  // console.log(\"1234123\", p);"]},"metadata":{},"sourceType":"module"}