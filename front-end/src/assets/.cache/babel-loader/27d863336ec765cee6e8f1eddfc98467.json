{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev_React\\\\project\\\\front-end\\\\src\\\\container\\\\ProductListContainer.js\";\nimport React, { Component, useState, useEffect } from 'react';\nimport ProductList from \"components/redux/ProductList\";\nimport PaginationList from 'components/Pagination/PaginationList';\nimport { connect } from 'react-redux';\nimport productStore from 'store/modules/productStore';\nimport { changeProductList, changeCurrentProduct } from '../store/modules/productStore';\nimport ApiService from '../ApiService';\n\nclass ProductListContainer extends Component {\n  //3\n  constructor(props) {\n    super(props);\n\n    this.reloadProductList = () => {\n      ApiService.fetchProductList().then(res => {\n        this.setState({\n          productList: res.data\n        });\n      }).catch(err => {\n        console.log(\"reload error\", err);\n      });\n    };\n\n    this.handleClick = name => {\n      changeCurrentProduct(name);\n    };\n\n    this.state = {\n      productList: []\n    };\n  }\n\n  componentDidMount() {\n    this.reloadProductList();\n  } //생성되자마자 -> 한번만 \n\n\n  render() {\n    const {\n      category,\n      list\n    } = this.props;\n    const query = \"ProductList_\" + category;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n      category: category,\n      list: list,\n      click: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = ({\n  productStore\n}) => ({\n  //2\n  category: productStore.category,\n  list: productStore.productList,\n  CurrentProduct: productStore.CurrentProduct\n}); //import store name이 맞는거다\n//props로 넣어줄 액션 생성함수\n\n\nconst mapDispatchToProps = dispatch => ({\n  changeProductList: list => dispatch(changeProductList(list)),\n  changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct))\n});\n\nexport default connect( // 스토어와 연결\nmapStateToProps, mapDispatchToProps)(ProductListContainer);","map":{"version":3,"sources":["C:/dev_React/project/front-end/src/container/ProductListContainer.js"],"names":["React","Component","useState","useEffect","ProductList","PaginationList","connect","productStore","changeProductList","changeCurrentProduct","ApiService","ProductListContainer","constructor","props","reloadProductList","fetchProductList","then","res","setState","productList","data","catch","err","console","log","handleClick","name","state","componentDidMount","render","category","list","query","mapStateToProps","CurrentProduct","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AAEA,OAAOC,WAAP,MAAwB,8BAAxB;AAGA,OAAOC,cAAP,MAA2B,sCAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,iBAAT,EAA4BC,oBAA5B,QAAwD,+BAAxD;AACA,OAAOC,UAAP,MAAuB,eAAvB;;AACA,MAAMC,oBAAN,SAAmCV,SAAnC,CAA6C;AAAE;AAC3CW,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAUnBC,iBAVmB,GAUC,MAAM;AACtBJ,MAAAA,UAAU,CAACK,gBAAX,GACKC,IADL,CACWC,GAAD,IAAS;AACX,aAAKC,QAAL,CAAc;AACVC,UAAAA,WAAW,EAAEF,GAAG,CAACG;AADP,SAAd;AAGH,OALL,EAMKC,KANL,CAMYC,GAAD,IAAS;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,GAA5B;AACH,OARL;AASH,KApBkB;;AAAA,SAsBnBG,WAtBmB,GAsBLC,IAAI,IAAI;AAClBjB,MAAAA,oBAAoB,CAACiB,IAAD,CAApB;AACH,KAxBkB;;AAEf,SAAKC,KAAL,GAAa;AACTR,MAAAA,WAAW,EAAE;AADJ,KAAb;AAGH;;AACDS,EAAAA,iBAAiB,GAAG;AAChB,SAAKd,iBAAL;AACH,GATwC,CAUzC;;;AAgBAe,EAAAA,MAAM,GAAG;AAEL,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAqB,KAAKlB,KAAhC;AACA,UAAMmB,KAAK,GAAI,iBAAiBF,QAAhC;AAGA,wBACI,uDACI,oBAAC,WAAD;AAAa,MAAA,QAAQ,EAAEA,QAAvB;AAAiC,MAAA,IAAI,EAAEC,IAAvC;AAA6C,MAAA,KAAK,EAAE,KAAKN,WAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAOH;;AAvCwC;;AAyC7C,MAAMQ,eAAe,GAAG,CAAC;AAAE1B,EAAAA;AAAF,CAAD,MAAuB;AAAG;AAC9CuB,EAAAA,QAAQ,EAAEvB,YAAY,CAACuB,QADoB;AAE3CC,EAAAA,IAAI,EAAExB,YAAY,CAACY,WAFwB;AAG3Ce,EAAAA,cAAc,EAAE3B,YAAY,CAAC2B;AAHc,CAAvB,CAAxB,C,CAKA;AAEA;;;AACA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACpC5B,EAAAA,iBAAiB,EAAEuB,IAAI,IAAIK,QAAQ,CAAC5B,iBAAiB,CAACuB,IAAD,CAAlB,CADC;AAEpCtB,EAAAA,oBAAoB,EAAEyB,cAAc,IAAIE,QAAQ,CAAC3B,oBAAoB,CAACyB,cAAD,CAArB;AAFZ,CAAL,CAAnC;;AAKA,eAAe5B,OAAO,EAAE;AACpB2B,eADkB,EAElBE,kBAFkB,CAAP,CAGbxB,oBAHa,CAAf","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\r\n\r\nimport ProductList from \"components/redux/ProductList\";\r\n\r\n\r\nimport PaginationList from 'components/Pagination/PaginationList'\r\nimport { connect } from 'react-redux';\r\nimport productStore from 'store/modules/productStore';\r\nimport { changeProductList, changeCurrentProduct } from '../store/modules/productStore';\r\nimport ApiService from '../ApiService';\r\nclass ProductListContainer extends Component { //3\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            productList: [],\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.reloadProductList();\r\n    }\r\n    //생성되자마자 -> 한번만 \r\n    reloadProductList = () => {\r\n        ApiService.fetchProductList()\r\n            .then((res) => {\r\n                this.setState({\r\n                    productList: res.data,\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"reload error\", err);\r\n            });\r\n    };\r\n\r\n    handleClick = name => {\r\n        changeCurrentProduct(name);\r\n    }\r\n    render() {\r\n\r\n        const { category, list } = this.props;\r\n        const query = (\"ProductList_\" + category);\r\n\r\n\r\n        return (\r\n            < >\r\n                <ProductList category={category} list={list} click={this.handleClick} />\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = ({ productStore }) => ({  //2\r\n    category: productStore.category,\r\n    list: productStore.productList,\r\n    CurrentProduct: productStore.CurrentProduct,\r\n});\r\n//import store name이 맞는거다\r\n\r\n//props로 넣어줄 액션 생성함수\r\nconst mapDispatchToProps = dispatch => ({\r\n    changeProductList: list => dispatch(changeProductList(list)),\r\n    changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct)),\r\n});\r\n\r\nexport default connect( // 스토어와 연결\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(ProductListContainer);"]},"metadata":{},"sourceType":"module"}