{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev_React\\\\project\\\\front-end\\\\src\\\\view\\\\DetailPage\\\\Sections\\\\PieChart.js\";\nimport React, { Component, useEffect } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport { Card, CardHeader, CardContent, IconButton, Divider, Typography } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { Grid } from \"@material-ui/core\";\nimport { connect } from 'react-redux';\nimport productStore from 'store/modules/productStore';\nimport { changeCurrentKeyword, changeCurrentProduct, changeReview } from 'store/modules/productStore';\nimport testData from './data';\nimport ApiService from \"ApiService\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%'\n  },\n  chartContainer: {\n    position: 'relative',\n    height: '300px'\n  },\n  stats: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  device: {\n    textAlign: 'center',\n    padding: theme.spacing(1)\n  },\n  deviceIcon: {\n    color: theme.palette.icon\n  }\n}));\n\nconst PieChart = props => {\n  const {\n    className,\n    ...rest\n  } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  useEffect(() => {\n    reloadReview(props.Currentnv_mid);\n    reloadData(); // 처음실행부터 지금의 nv_mid값을 기준으로 리뷰 데이터를 select* from review where nv_mid=nv_mid로 가져온다\n    //즉 여기서 리뷰의 갯수들을 체킹 가능하다.\n  }, [props.Currentnv_mid]); //처음 실행될땐 이렇게 한다. \n\n  let titleString = props.CurrentProduct + \"'s Keyword\";\n  console.log(\"testse\", props.CurrentProduct);\n\n  function reloadData() {\n    let kewordReview = props.reviewLabels;\n    let searchText = kewordReview.filter(kewordReview => kewordReview.review.indexOf(props.CurrentKeyword) >= 0);\n    console.log(\"test\", searchText);\n  }\n\n  ;\n  const data = {\n    datasets: [{\n      data: props.reviewNumber,\n      // store에서 가져온 값 이걸 바꾸면 차트도 바뀌어야 됨 !!!!!!!!!!!!!!\n      backgroundColor: ['#e53935', '#8e24aa', '#9fa8da', '#b2dfdb', '#80cbc4', '#e6ee9c', '#ffcc80', '#fff59d', '#90a4ae'],\n      borderWidth: 8,\n      borderColor: theme.palette.white,\n      hoverBorderColor: theme.palette.white\n    }],\n    labels: props.reviewLabels // 보여주는 라벨들\n\n  };\n  const options = {\n    legend: {\n      display: true\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: false,\n    cutoutPercentage: 80,\n    layout: {\n      padding: 0\n    },\n    tooltips: {\n      enabled: true,\n      mode: 'index',\n      intersect: false,\n      borderWidth: 1,\n      borderColor: theme.palette.divider,\n      backgroundColor: theme.palette.white,\n      titleFontColor: theme.palette.text.primary,\n      bodyFontColor: theme.palette.text.secondary,\n      footerFontColor: theme.palette.text.secondary\n    }\n  };\n  const {\n    changeCurrentKeyword,\n    changeReview\n  } = props;\n  const keywords = props.reviewLabels; // click 이벤트로 처리되는 label들을 지정해둔 곳  \n\n  const test = testData;\n\n  const keywordClick = keyword => {\n    changeCurrentKeyword(keyword);\n\n    switch (keyword) {\n      case \"무게감\":\n        changeCurrentKeyword(\"무게감\");\n        break;\n\n      case \"클릭감\":\n        changeCurrentKeyword(\"클릭감\");\n        break;\n\n      case \"가격\":\n        changeCurrentKeyword(\"가격\");\n        break;\n\n      case \"배송\":\n        changeCurrentKeyword(\"배송\"); // reloadReview(props.Currentnv_mid);\n        // console.log(\"prejaeorg\", props.Currentnv_mid);\n\n        break;\n    }\n\n    console.log(\"changeCurrentKeyword\", props.CurrentKeyword); //키워드가 바뀌는 곳에서 리뷰도 바뀌어야 된다.\n  };\n\n  function reloadReview(nv_mid) {\n    ApiService.fetchproductReview(nv_mid).then(res => {\n      changeReview(res.data);\n      console.log(\"res.data\", res.data);\n    }).catch(err => {\n      console.log(\"reload error\", err);\n    });\n  }\n\n  ; //여기서 리뷰를 가져옴 nv_mid값을 기준으로 \n\n  return /*#__PURE__*/React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(CardHeader, {\n    action: /*#__PURE__*/React.createElement(IconButton, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(RefreshIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    })),\n    title: titleString,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.chartContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Doughnut, {\n    data: data,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 14\n    }\n  }, \"Click Keyword \")), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.stats,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, keywords.map(keyword => /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    fullWidth: \"true\",\n    color: \"primary\",\n    onClick: () => keywordClick(keyword),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 17\n    }\n  }, keyword)))))));\n};\n\nPieChart.propTypes = {\n  className: PropTypes.string\n};\n\nconst mapStateToProps = ({\n  productStore\n}) => ({\n  //2\n  CurrentProduct: productStore.CurrentProduct,\n  CurrentKeyword: productStore.CurrentKeyword,\n  reviewNumber: productStore.reviewNumber,\n  reviewLabels: productStore.reviewLabels,\n  ReviewData: productStore.ReviewData,\n  Currentnv_mid: productStore.Currentnv_mid\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct)),\n    changeCurrentKeyword: CurrentKeyword => dispatch(changeCurrentKeyword(CurrentKeyword)),\n    changeReview: ReviewData => dispatch(changeReview(ReviewData))\n  };\n};\n\nexport default connect( // 스토어와 연결\nmapStateToProps, mapDispatchToProps)(PieChart);","map":{"version":3,"sources":["C:/dev_React/project/front-end/src/view/DetailPage/Sections/PieChart.js"],"names":["React","Component","useEffect","Doughnut","clsx","PropTypes","makeStyles","useTheme","Button","Card","CardHeader","CardContent","IconButton","Divider","Typography","RefreshIcon","Grid","connect","productStore","changeCurrentKeyword","changeCurrentProduct","changeReview","testData","ApiService","useStyles","theme","root","height","chartContainer","position","stats","marginTop","spacing","display","justifyContent","device","textAlign","padding","deviceIcon","color","palette","icon","PieChart","props","className","rest","classes","reloadReview","Currentnv_mid","reloadData","titleString","CurrentProduct","console","log","kewordReview","reviewLabels","searchText","filter","review","indexOf","CurrentKeyword","data","datasets","reviewNumber","backgroundColor","borderWidth","borderColor","white","hoverBorderColor","labels","options","legend","responsive","maintainAspectRatio","animation","cutoutPercentage","layout","tooltips","enabled","mode","intersect","divider","titleFontColor","text","primary","bodyFontColor","secondary","footerFontColor","keywords","test","keywordClick","keyword","nv_mid","fetchproductReview","then","res","catch","err","map","propTypes","string","mapStateToProps","ReviewData","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component, useEffect } from 'react';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  IconButton,\r\n  Divider,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { connect } from 'react-redux';\r\nimport productStore from 'store/modules/productStore';\r\nimport { changeCurrentKeyword, changeCurrentProduct, changeReview } from 'store/modules/productStore';\r\nimport testData from './data';\r\nimport ApiService from \"ApiService\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    height: '100%'\r\n  },\r\n  chartContainer: {\r\n    position: 'relative',\r\n    height: '300px'\r\n  },\r\n  stats: {\r\n    marginTop: theme.spacing(2),\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n  },\r\n  device: {\r\n    textAlign: 'center',\r\n    padding: theme.spacing(1)\r\n  },\r\n  deviceIcon: {\r\n    color: theme.palette.icon\r\n  }\r\n}));\r\n\r\nconst PieChart = props => {\r\n  const { className, ...rest } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  useEffect(() => {\r\n    reloadReview(props.Currentnv_mid)\r\n    reloadData();\r\n    // 처음실행부터 지금의 nv_mid값을 기준으로 리뷰 데이터를 select* from review where nv_mid=nv_mid로 가져온다\r\n    //즉 여기서 리뷰의 갯수들을 체킹 가능하다.\r\n\r\n  }, [props.Currentnv_mid]);\r\n  //처음 실행될땐 이렇게 한다. \r\n\r\n\r\n\r\n  let titleString = props.CurrentProduct + \"'s Keyword\";\r\n  console.log(\"testse\", props.CurrentProduct);\r\n  function reloadData() {\r\n    let kewordReview = props.reviewLabels;\r\n    let searchText = kewordReview.filter(kewordReview => kewordReview.review.indexOf(props.CurrentKeyword) >= 0);\r\n    console.log(\"test\", searchText);\r\n  };\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: props.reviewNumber, // store에서 가져온 값 이걸 바꾸면 차트도 바뀌어야 됨 !!!!!!!!!!!!!!\r\n        backgroundColor: ['#e53935', '#8e24aa', '#9fa8da', '#b2dfdb', '#80cbc4', '#e6ee9c', '#ffcc80', '#fff59d', '#90a4ae'],\r\n        borderWidth: 8,\r\n        borderColor: theme.palette.white,\r\n        hoverBorderColor: theme.palette.white\r\n      }\r\n    ],\r\n    labels: props.reviewLabels // 보여주는 라벨들\r\n  };\r\n\r\n  const options = {\r\n    legend: {\r\n      display: true\r\n    },\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    animation: false,\r\n    cutoutPercentage: 80,\r\n    layout: { padding: 0 },\r\n\r\n    tooltips: {\r\n      enabled: true,\r\n      mode: 'index',\r\n      intersect: false,\r\n      borderWidth: 1,\r\n      borderColor: theme.palette.divider,\r\n      backgroundColor: theme.palette.white,\r\n      titleFontColor: theme.palette.text.primary,\r\n      bodyFontColor: theme.palette.text.secondary,\r\n      footerFontColor: theme.palette.text.secondary\r\n    },\r\n\r\n  };\r\n  const { changeCurrentKeyword, changeReview } = props;\r\n  const keywords = props.reviewLabels;\r\n  // click 이벤트로 처리되는 label들을 지정해둔 곳  \r\n  const test = testData;\r\n\r\n  const keywordClick = (keyword) => {\r\n    changeCurrentKeyword(keyword);\r\n    switch (keyword) {\r\n      case \"무게감\":\r\n        changeCurrentKeyword(\"무게감\");\r\n        break;\r\n      case \"클릭감\":\r\n        changeCurrentKeyword(\"클릭감\");\r\n        break;\r\n      case \"가격\":\r\n        changeCurrentKeyword(\"가격\");\r\n        break;\r\n      case \"배송\":\r\n        changeCurrentKeyword(\"배송\");\r\n        // reloadReview(props.Currentnv_mid);\r\n        // console.log(\"prejaeorg\", props.Currentnv_mid);\r\n        break;\r\n    }\r\n    console.log(\"changeCurrentKeyword\", props.CurrentKeyword);\r\n    //키워드가 바뀌는 곳에서 리뷰도 바뀌어야 된다.\r\n  }\r\n\r\n  function reloadReview(nv_mid) {\r\n    ApiService.fetchproductReview(nv_mid)\r\n      .then((res) => {\r\n        changeReview(res.data);\r\n        console.log(\"res.data\", res.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"reload error\", err);\r\n      });\r\n  };\r\n  //여기서 리뷰를 가져옴 nv_mid값을 기준으로 \r\n  return (\r\n    <Card\r\n      {...rest}\r\n      className={clsx(classes.root, className)}\r\n    >\r\n      <CardHeader\r\n        action={\r\n          <IconButton size=\"small\">\r\n            <RefreshIcon />\r\n          </IconButton>\r\n        }\r\n        title={titleString}\r\n      />\r\n      <Divider />\r\n      <CardContent>\r\n        <div className={classes.chartContainer}>\r\n          <Doughnut\r\n            data={data}\r\n            options={options}\r\n\r\n          />\r\n        </div>\r\n\r\n        <div><p>Click Keyword </p></div>\r\n        <div className={classes.stats}>\r\n          <Grid container spacing={1}>\r\n            {keywords.map(keyword => (\r\n              <Grid item xs={12} sm={6}>\r\n                <Button variant=\"outlined\" fullWidth='true' color=\"primary\" onClick={() => keywordClick(keyword)} >{keyword}</Button>\r\n              </Grid>\r\n\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n      </CardContent>\r\n    </Card >\r\n  );\r\n};\r\n\r\nPieChart.propTypes = {\r\n  className: PropTypes.string\r\n};\r\nconst mapStateToProps = ({ productStore }) => ({  //2\r\n  CurrentProduct: productStore.CurrentProduct,\r\n  CurrentKeyword: productStore.CurrentKeyword,\r\n  reviewNumber: productStore.reviewNumber,\r\n  reviewLabels: productStore.reviewLabels,\r\n  ReviewData: productStore.ReviewData,\r\n  Currentnv_mid: productStore.Currentnv_mid,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct)),\r\n    changeCurrentKeyword: CurrentKeyword => dispatch(changeCurrentKeyword(CurrentKeyword)),\r\n    changeReview: ReviewData => dispatch(changeReview(ReviewData)),\r\n  }\r\n};\r\n\r\nexport default connect( // 스토어와 연결\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(PieChart);\r\n\r\n"]},"metadata":{},"sourceType":"module"}