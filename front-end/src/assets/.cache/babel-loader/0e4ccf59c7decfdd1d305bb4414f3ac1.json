{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev_React\\\\project\\\\front-end\\\\src\\\\view\\\\DetailPage\\\\Sections\\\\PieChart.js\";\nimport React, { useEffect } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport { Card, CardHeader, CardContent, IconButton, Divider } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { Grid } from \"@material-ui/core\";\nimport { connect } from 'react-redux'; //import productStore from 'store/modules/productStore';\n\nimport { changeCurrentKeyword, changeCurrentProduct, changeReview, Change_ReviewNumber } from 'store/modules/productStore';\nimport ApiService from \"ApiService\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%'\n  },\n  chartContainer: {\n    position: 'relative',\n    height: '300px'\n  },\n  stats: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  device: {\n    textAlign: 'center',\n    padding: theme.spacing(1)\n  },\n  deviceIcon: {\n    color: theme.palette.icon\n  }\n}));\n\nconst PieChart = props => {\n  const {\n    className,\n    ...rest\n  } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  useEffect(() => {\n    reloadReview(props.Currentnv_mid);\n    console.log(\"처음엔\");\n    changeCurrentKeyword(\"\");\n    Change_ReviewNumber(\"\"); // 처음실행부터 지금의 nv_mid값을 기준으로 리뷰 데이터를 select* from review where nv_mid=nv_mid로 가져온다\n    //즉 여기서 리뷰의 갯수들을 체킹 가능하다.\n  }, [props.Currentnv_mid]); //처음 실행될땐 이렇게 한다. \n\n  useEffect(() => {\n    reloadData();\n  }, [props.ReviewData]);\n  let titleString = props.CurrentProduct + \"'s Keyword\";\n\n  function reloadData() {\n    //const testString = props.CurrentKeyword;\n    let kewordReview = props.ReviewData; // let searchText = kewordReview.filter(kewordReview => kewordReview.review.indexOf(testString) >= 0);\n\n    let searchText = props.reviewLabels.map(label => kewordReview.filter(kewordReview => kewordReview.review.indexOf(label) >= 0));\n    let count = searchText.map(q => q.length);\n    Change_ReviewNumber(count); // console.log(\"testString test\", testString);\n    // console.log(\"kewordReview test\", kewordReview);\n    // console.log(\"searchText test\", searchText);\n    // console.log(\"reviewLabels test\", props.reviewLabels);\n    // console.log(\"count test\", count);\n    // console.log(\"reviewNumber test\", props.reviewNumber);\n  }\n\n  ;\n  let label = props.reviewLabels.map(k => k.keyword);\n  const data = {\n    datasets: [{\n      data: props.reviewNumber,\n      // store에서 가져온 값 이걸 바꾸면 차트도 바뀌어야 됨 !!!!!!!!!!!!!!\n      backgroundColor: ['#e53935', '#8e24aa', '#9fa8da', '#b2dfdb', '#80cbc4', '#e6ee9c', '#ffcc80', '#fff59d', '#90a4ae'],\n      borderWidth: 8,\n      borderColor: theme.palette.white,\n      hoverBorderColor: theme.palette.white\n    }],\n    labels: label // 보여주는 라벨들\n\n  };\n  const options = {\n    legend: {\n      display: true\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: false,\n    cutoutPercentage: 80,\n    layout: {\n      padding: 0\n    },\n    tooltips: {\n      enabled: true,\n      mode: 'index',\n      intersect: false,\n      borderWidth: 1,\n      borderColor: theme.palette.divider,\n      backgroundColor: theme.palette.white,\n      titleFontColor: theme.palette.text.primary,\n      bodyFontColor: theme.palette.text.secondary,\n      footerFontColor: theme.palette.text.secondary\n    }\n  };\n  const {\n    changeCurrentKeyword,\n    changeReview,\n    Change_ReviewNumber\n  } = props;\n  const keywords = props.reviewLabels; // click 이벤트로 처리되는 label들을 지정해둔 곳  \n\n  const keywordClick = keyword => {\n    changeCurrentKeyword(keyword); // switch (keyword) {\n    //   case \"무게감\":\n    //     changeCurrentKeyword(\"무게감\");\n    //     break;\n    //   case \"클릭감\":\n    //     changeCurrentKeyword(\"클릭감\");\n    //     break;\n    //   case \"가격\":\n    //     changeCurrentKeyword(\"가격\");\n    //     break;\n    //   case \"배송\":\n    //     changeCurrentKeyword(\"배송\");\n    //     // reloadReview(props.Currentnv_mid);\n    //     // console.log(\"prejaeorg\", props.Currentnv_mid);\n    //     break;\n    //   default:\n    //     changeCurrentKeyword(\"\");\n    //     break;\n    // }\n\n    console.log(\"changeCurrentKeyword\", props.CurrentKeyword); //키워드가 바뀌는 곳에서 리뷰도 바뀌어야 된다.\n  };\n\n  function reloadReview(nv_mid) {\n    ApiService.fetchproductReview(nv_mid).then(res => {\n      changeReview(res.data);\n      console.log(\"res.data\", res.data);\n    }).catch(err => {\n      console.log(\"reload error\", err);\n    });\n  }\n\n  ; //여기서 리뷰를 가져옴 nv_mid값을 기준으로 \n\n  const reset = () => {\n    changeCurrentKeyword(\"\");\n  };\n\n  return /*#__PURE__*/React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(CardHeader, {\n    action: /*#__PURE__*/React.createElement(IconButton, {\n      size: \"small\",\n      onClick: reset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(RefreshIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    })),\n    title: titleString,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.chartContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Doughnut, {\n    data: data,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 14\n    }\n  }, \"Click Keyword \")), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.stats,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, keywords.map(keyword => /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    fullWidth: \"true\",\n    color: \"primary\",\n    onClick: () => keywordClick(keyword),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }\n  }, keyword)))))));\n};\n\nPieChart.propTypes = {\n  className: PropTypes.string\n};\n\nconst mapStateToProps = ({\n  productStore\n}) => ({\n  //2\n  CurrentProduct: productStore.CurrentProduct,\n  CurrentKeyword: productStore.CurrentKeyword,\n  reviewNumber: productStore.reviewNumber,\n  reviewLabels: productStore.reviewLabels,\n  ReviewData: productStore.ReviewData,\n  Currentnv_mid: productStore.Currentnv_mid,\n  SearchTextField: productStore.SearchTextField\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct)),\n    changeCurrentKeyword: CurrentKeyword => dispatch(changeCurrentKeyword(CurrentKeyword)),\n    changeReview: ReviewData => dispatch(changeReview(ReviewData)),\n    Change_ReviewNumber: reviewNumber => dispatch(Change_ReviewNumber(reviewNumber))\n  };\n};\n\nexport default connect( // 스토어와 연결\nmapStateToProps, mapDispatchToProps)(PieChart);","map":{"version":3,"sources":["C:/dev_React/project/front-end/src/view/DetailPage/Sections/PieChart.js"],"names":["React","useEffect","Doughnut","clsx","PropTypes","makeStyles","useTheme","Button","Card","CardHeader","CardContent","IconButton","Divider","RefreshIcon","Grid","connect","changeCurrentKeyword","changeCurrentProduct","changeReview","Change_ReviewNumber","ApiService","useStyles","theme","root","height","chartContainer","position","stats","marginTop","spacing","display","justifyContent","device","textAlign","padding","deviceIcon","color","palette","icon","PieChart","props","className","rest","classes","reloadReview","Currentnv_mid","console","log","reloadData","ReviewData","titleString","CurrentProduct","kewordReview","searchText","reviewLabels","map","label","filter","review","indexOf","count","q","length","k","keyword","data","datasets","reviewNumber","backgroundColor","borderWidth","borderColor","white","hoverBorderColor","labels","options","legend","responsive","maintainAspectRatio","animation","cutoutPercentage","layout","tooltips","enabled","mode","intersect","divider","titleFontColor","text","primary","bodyFontColor","secondary","footerFontColor","keywords","keywordClick","CurrentKeyword","nv_mid","fetchproductReview","then","res","catch","err","reset","propTypes","string","mapStateToProps","productStore","SearchTextField","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  IconButton,\r\n  Divider,\r\n} from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { connect } from 'react-redux';\r\n//import productStore from 'store/modules/productStore';\r\nimport { changeCurrentKeyword, changeCurrentProduct, changeReview, Change_ReviewNumber } from 'store/modules/productStore';\r\nimport ApiService from \"ApiService\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    height: '100%'\r\n  },\r\n  chartContainer: {\r\n    position: 'relative',\r\n    height: '300px'\r\n  },\r\n  stats: {\r\n    marginTop: theme.spacing(2),\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n  },\r\n  device: {\r\n    textAlign: 'center',\r\n    padding: theme.spacing(1)\r\n  },\r\n  deviceIcon: {\r\n    color: theme.palette.icon\r\n  }\r\n}));\r\n\r\nconst PieChart = props => {\r\n  const { className, ...rest } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  useEffect(() => {\r\n    reloadReview(props.Currentnv_mid)\r\n    console.log(\"처음엔\");\r\n    changeCurrentKeyword(\"\");\r\n    Change_ReviewNumber(\"\");\r\n    // 처음실행부터 지금의 nv_mid값을 기준으로 리뷰 데이터를 select* from review where nv_mid=nv_mid로 가져온다\r\n    //즉 여기서 리뷰의 갯수들을 체킹 가능하다.\r\n\r\n  }, [props.Currentnv_mid]);\r\n  //처음 실행될땐 이렇게 한다. \r\n  useEffect(() => {\r\n    reloadData();\r\n  }, [props.ReviewData])\r\n\r\n\r\n  let titleString = props.CurrentProduct + \"'s Keyword\";\r\n\r\n  function reloadData() {\r\n    //const testString = props.CurrentKeyword;\r\n    let kewordReview = props.ReviewData;\r\n    // let searchText = kewordReview.filter(kewordReview => kewordReview.review.indexOf(testString) >= 0);\r\n    let searchText = props.reviewLabels.map((label => kewordReview.filter(kewordReview => kewordReview.review.indexOf(label) >= 0)));\r\n    let count = searchText.map((q => q.length));\r\n    Change_ReviewNumber(count);\r\n    // console.log(\"testString test\", testString);\r\n    // console.log(\"kewordReview test\", kewordReview);\r\n    // console.log(\"searchText test\", searchText);\r\n    // console.log(\"reviewLabels test\", props.reviewLabels);\r\n    // console.log(\"count test\", count);\r\n    // console.log(\"reviewNumber test\", props.reviewNumber);\r\n  };\r\n  let label = props.reviewLabels.map(k => k.keyword);\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: props.reviewNumber, // store에서 가져온 값 이걸 바꾸면 차트도 바뀌어야 됨 !!!!!!!!!!!!!!\r\n        backgroundColor: ['#e53935', '#8e24aa', '#9fa8da', '#b2dfdb', '#80cbc4', '#e6ee9c', '#ffcc80', '#fff59d', '#90a4ae'],\r\n        borderWidth: 8,\r\n        borderColor: theme.palette.white,\r\n        hoverBorderColor: theme.palette.white\r\n      }\r\n    ],\r\n    labels: label, // 보여주는 라벨들\r\n  };\r\n\r\n  const options = {\r\n    legend: {\r\n      display: true\r\n    },\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    animation: false,\r\n    cutoutPercentage: 80,\r\n    layout: { padding: 0 },\r\n\r\n    tooltips: {\r\n      enabled: true,\r\n      mode: 'index',\r\n      intersect: false,\r\n      borderWidth: 1,\r\n      borderColor: theme.palette.divider,\r\n      backgroundColor: theme.palette.white,\r\n      titleFontColor: theme.palette.text.primary,\r\n      bodyFontColor: theme.palette.text.secondary,\r\n      footerFontColor: theme.palette.text.secondary\r\n    },\r\n\r\n  };\r\n  const { changeCurrentKeyword, changeReview, Change_ReviewNumber } = props;\r\n  const keywords = props.reviewLabels;\r\n  // click 이벤트로 처리되는 label들을 지정해둔 곳  \r\n\r\n\r\n  const keywordClick = (keyword) => {\r\n    changeCurrentKeyword(keyword);\r\n    // switch (keyword) {\r\n    //   case \"무게감\":\r\n    //     changeCurrentKeyword(\"무게감\");\r\n    //     break;\r\n    //   case \"클릭감\":\r\n    //     changeCurrentKeyword(\"클릭감\");\r\n    //     break;\r\n    //   case \"가격\":\r\n    //     changeCurrentKeyword(\"가격\");\r\n    //     break;\r\n    //   case \"배송\":\r\n    //     changeCurrentKeyword(\"배송\");\r\n    //     // reloadReview(props.Currentnv_mid);\r\n    //     // console.log(\"prejaeorg\", props.Currentnv_mid);\r\n    //     break;\r\n    //   default:\r\n    //     changeCurrentKeyword(\"\");\r\n    //     break;\r\n    // }\r\n    console.log(\"changeCurrentKeyword\", props.CurrentKeyword);\r\n    //키워드가 바뀌는 곳에서 리뷰도 바뀌어야 된다.\r\n  }\r\n\r\n  function reloadReview(nv_mid) {\r\n    ApiService.fetchproductReview(nv_mid)\r\n      .then((res) => {\r\n        changeReview(res.data);\r\n        console.log(\"res.data\", res.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"reload error\", err);\r\n      });\r\n  };\r\n  //여기서 리뷰를 가져옴 nv_mid값을 기준으로 \r\n  const reset = () => {\r\n    changeCurrentKeyword(\"\");\r\n  }\r\n  return (\r\n    <Card\r\n      {...rest}\r\n      className={clsx(classes.root, className)}\r\n    >\r\n      <CardHeader\r\n        action={\r\n          <IconButton size=\"small\" onClick={reset}>\r\n\r\n            <RefreshIcon />\r\n          </IconButton>\r\n        }\r\n        title={titleString}\r\n      />\r\n      <Divider />\r\n      <CardContent>\r\n        <div className={classes.chartContainer}>\r\n          <Doughnut\r\n            data={data}\r\n            options={options}\r\n\r\n          />\r\n        </div>\r\n\r\n        <div><p>Click Keyword </p></div>\r\n        <div className={classes.stats}>\r\n          <Grid container spacing={1}>\r\n            {keywords.map(keyword => (\r\n              <Grid item xs={12} sm={6}>\r\n                <Button variant=\"outlined\" fullWidth='true' color=\"primary\" onClick={() => keywordClick(keyword)} >{keyword}</Button>\r\n              </Grid>\r\n\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n      </CardContent>\r\n    </Card >\r\n  );\r\n};\r\n\r\nPieChart.propTypes = {\r\n  className: PropTypes.string\r\n};\r\nconst mapStateToProps = ({ productStore }) => ({  //2\r\n  CurrentProduct: productStore.CurrentProduct,\r\n  CurrentKeyword: productStore.CurrentKeyword,\r\n  reviewNumber: productStore.reviewNumber,\r\n  reviewLabels: productStore.reviewLabels,\r\n  ReviewData: productStore.ReviewData,\r\n  Currentnv_mid: productStore.Currentnv_mid,\r\n  SearchTextField: productStore.SearchTextField,\r\n\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct)),\r\n    changeCurrentKeyword: CurrentKeyword => dispatch(changeCurrentKeyword(CurrentKeyword)),\r\n    changeReview: ReviewData => dispatch(changeReview(ReviewData)),\r\n    Change_ReviewNumber: reviewNumber => dispatch(Change_ReviewNumber(reviewNumber)),\r\n\r\n  }\r\n};\r\n\r\nexport default connect( // 스토어와 연결\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(PieChart);\r\n\r\n"]},"metadata":{},"sourceType":"module"}