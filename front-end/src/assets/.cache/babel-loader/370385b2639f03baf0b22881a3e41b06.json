{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev_React\\\\project\\\\front-end\\\\src\\\\components\\\\Pagination\\\\PaginationProductList.js\";\nimport React, { useState, useEffect, useSelector } from 'react';\nimport Posts from './Posts';\nimport PaginationPage from './PaginationPage';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport productStore from 'store/modules/productStore';\nimport { changeProductList, changeCurrentProduct } from 'store/modules/productStore';\nimport ApiService from \"ApiService\";\nimport SearchBar from 'components/Search/SearchBar';\n\nconst PaginationProductList = props => {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(12);\n\n  const fetchPosts = () => {\n    setPosts(props.list);\n  };\n\n  useEffect(() => {\n    //fetchPosts();\n    App();\n    console.log(\"props.list\", props.list); //변화를 감지하거나, 컴포넌트를 부를때 마다 실행 즉 화면이 바뀌면 한번은 실행하게된다. \n  }, [props.list]);\n\n  function App() {\n    setPosts(useSelector(state => state.list));\n    setPosts(posts);\n    const keyword = useSelector(state => state.searchKeyword);\n\n    if (keyword) {\n      posts = posts.filter(item => item.name.indexOf(keyword) >= 0);\n    }\n  } // Get current posts\n\n\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost); // Change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-primary mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"My Blog\"), /*#__PURE__*/React.createElement(SearchBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Posts, {\n    posts: currentPosts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PaginationPage, {\n    postsPerPage: postsPerPage,\n    totalPosts: posts.length,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = ({\n  productStore\n}) => ({\n  //2\n  category: productStore.category,\n  list: productStore.productList,\n  CurrentProduct: productStore.CurrentProduct,\n  searchKeyword: productStore.searchKeyword\n}); //import store name이 맞는거다\n//props로 넣어줄 액션 생성함수\n\n\nconst mapDispatchToProps = dispatch => ({\n  changeProductList: list => dispatch(changeProductList(list)),\n  changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct))\n});\n\nexport default connect( // 스토어와 연결\nmapStateToProps, mapDispatchToProps)(PaginationProductList);","map":{"version":3,"sources":["C:/dev_React/project/front-end/src/components/Pagination/PaginationProductList.js"],"names":["React","useState","useEffect","useSelector","Posts","PaginationPage","axios","connect","productStore","changeProductList","changeCurrentProduct","ApiService","SearchBar","PaginationProductList","props","posts","setPosts","loading","setLoading","currentPage","setCurrentPage","postsPerPage","fetchPosts","list","App","console","log","state","keyword","searchKeyword","filter","item","name","indexOf","indexOfLastPost","indexOfFirstPost","currentPosts","slice","paginate","pageNumber","length","mapStateToProps","category","productList","CurrentProduct","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useSelector } from 'react';\r\nimport Posts from './Posts';\r\n\r\nimport PaginationPage from './PaginationPage';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport productStore from 'store/modules/productStore';\r\nimport { changeProductList, changeCurrentProduct } from 'store/modules/productStore';\r\nimport ApiService from \"ApiService\";\r\nimport SearchBar from 'components/Search/SearchBar';\r\nconst PaginationProductList = (props) => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [postsPerPage] = useState(12);\r\n\r\n  const fetchPosts = () => {\r\n    setPosts(props.list);\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    //fetchPosts();\r\n    App();\r\n    console.log(\"props.list\", props.list);\r\n    //변화를 감지하거나, 컴포넌트를 부를때 마다 실행 즉 화면이 바뀌면 한번은 실행하게된다. \r\n  }, [props.list]);\r\n\r\n  function App() {\r\n    setPosts(useSelector(state => state.list));\r\n    setPosts(posts);\r\n    const keyword = useSelector(state => state.searchKeyword);\r\n    if (keyword) {\r\n      posts = posts.filter(item => item.name.indexOf(keyword) >= 0);\r\n    }\r\n  }\r\n\r\n  // Get current posts\r\n  const indexOfLastPost = currentPage * postsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n\r\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n  // Change page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (\r\n    <div className='container mt-5'>\r\n      <h1 className='text-primary mb-3'>My Blog</h1>\r\n      <SearchBar />\r\n      <Posts posts={currentPosts} />\r\n      <PaginationPage\r\n        postsPerPage={postsPerPage}\r\n        totalPosts={posts.length}\r\n        paginate={paginate}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ productStore }) => ({  //2\r\n  category: productStore.category,\r\n  list: productStore.productList,\r\n  CurrentProduct: productStore.CurrentProduct,\r\n  searchKeyword: productStore.searchKeyword,\r\n});\r\n//import store name이 맞는거다\r\n\r\n//props로 넣어줄 액션 생성함수\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeProductList: list => dispatch(changeProductList(list)),\r\n  changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct)),\r\n});\r\n\r\nexport default connect( // 스토어와 연결\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(PaginationProductList);"]},"metadata":{},"sourceType":"module"}