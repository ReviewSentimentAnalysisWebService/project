{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev_React\\\\project\\\\front-end\\\\src\\\\view\\\\DetailPage\\\\Sections\\\\RadarChart.js\";\nimport React, { useEffect } from 'react';\nimport { Radar } from 'react-chartjs-2';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport ApiService from \"ApiService\";\nimport { Card, CardHeader, CardContent, IconButton, Divider, Typography } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { Grid } from \"@material-ui/core\";\nimport { connect } from 'react-redux';\nimport productStore from 'store/modules/productStore';\nimport { changeCurrentKeyword, changeCurrentProduct, changeSentimental } from 'store/modules/productStore';\nimport testData from './data';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%'\n  },\n  chartContainer: {\n    position: 'relative',\n    height: '300px'\n  },\n  stats: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  device: {\n    textAlign: 'center',\n    padding: theme.spacing(1)\n  },\n  deviceIcon: {\n    color: theme.palette.icon\n  }\n}));\n\nconst RadarChart = props => {\n  const {\n    className,\n    ...rest\n  } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  let titleString = props.CurrentProduct + \"'s Sentimental Analysis\";\n  useEffect(() => {\n    reloadSentimental(props.Currentnv_mid);\n    console.log(\"처음엔\");\n    changeCurrentKeyword(\"\");\n  }, [props.Currentnv_mid]); //처음 실행될땐 이렇게 한다. \n\n  useEffect(() => {\n    reloadData();\n  }, [props.ReviewData]);\n\n  function reloadData() {// // let searchText = kewordReview.filter(kewordReview => kewordReview.review.indexOf(testString) >= 0);\n    // let searchText = props.reviewLabels.map((label => kewordReview.filter(kewordReview => kewordReview.review.indexOf(label) >= 0)));\n    // let count = searchText.map((q => q.length));\n  }\n\n  ;\n\n  function reloadSentimental(nv_mid) {\n    ApiService.fetchSentimentalReview(nv_mid).then(res => {\n      // changeReview(res.data);\n      console.log(\"res.data\", res.data);\n    }).catch(err => {\n      console.log(\"reload error\", err);\n    });\n  }\n\n  ; //여기서 리뷰를 가져옴 nv_mid값을 기준으로 \n\n  const reset = () => {\n    changeCurrentKeyword(\"\");\n  };\n\n  const data = {\n    labels: props.reviewLabels.map(k => k.keyword),\n    datasets: [{\n      label: props.CurrentProduct,\n      backgroundColor: 'rgba(255, 99, 132, 0.2)',\n      borderColor: 'rgb(255, 99, 132)',\n      PointBackgroundColor: 'rgba(255,99,132,1)',\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: 'rgba(255,99,132,1)',\n      data: props.SentimentalNumber\n    }, {\n      label: 'My Second dataset',\n      backgroundColor: 'rgba(54, 162, 235, 0.2)',\n      borderColor: 'rgb(54, 162, 235)',\n      PointBackgroundColor: 'rgba(255,99,132,1)',\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: 'rgba(255,99,132,1)',\n      data: [28, 48, 40, 19, 96]\n    }]\n  };\n  const options = {\n    scale: {\n      ticks: {\n        beginAtZero: true\n      }\n    },\n    legend: {\n      display: true,\n      position: 'top'\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: false,\n    cutoutPercentage: 800,\n    layout: {\n      padding: 4\n    },\n    tooltips: {\n      mode: 'index',\n      borderWidth: 1\n    }\n  };\n  return /*#__PURE__*/React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CardHeader, {\n    action: /*#__PURE__*/React.createElement(IconButton, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(RefreshIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 25\n      }\n    })),\n    title: titleString,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Radar, {\n    data: data,\n    options: options,\n    width: 1000,\n    height: 400,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  })));\n};\n\nRadarChart.propTypes = {\n  className: PropTypes.string\n};\n\nconst mapStateToProps = ({\n  productStore\n}) => ({\n  //2\n  CurrentProduct: productStore.CurrentProduct,\n  CurrentKeyword: productStore.CurrentKeyword,\n  SentimentalLabel: productStore.SentimentalLabel,\n  SentimentalNumber: productStore.SentimentalNumber,\n  ReviewData: productStore.ReviewData\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct)),\n    changeCurrentKeyword: CurrentKeyword => dispatch(changeCurrentKeyword(CurrentKeyword)),\n    changeSentimental: SentimentalData => dispatch(changeSentimental(SentimentalData))\n  };\n};\n\nexport default connect( // 스토어와 연결\nmapStateToProps, mapDispatchToProps)(RadarChart);","map":{"version":3,"sources":["C:/dev_React/project/front-end/src/view/DetailPage/Sections/RadarChart.js"],"names":["React","useEffect","Radar","clsx","PropTypes","makeStyles","useTheme","ApiService","Card","CardHeader","CardContent","IconButton","Divider","Typography","RefreshIcon","Grid","connect","productStore","changeCurrentKeyword","changeCurrentProduct","changeSentimental","testData","useStyles","theme","root","height","chartContainer","position","stats","marginTop","spacing","display","justifyContent","device","textAlign","padding","deviceIcon","color","palette","icon","RadarChart","props","className","rest","classes","titleString","CurrentProduct","reloadSentimental","Currentnv_mid","console","log","reloadData","ReviewData","nv_mid","fetchSentimentalReview","then","res","data","catch","err","reset","labels","reviewLabels","map","k","keyword","datasets","label","backgroundColor","borderColor","PointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","SentimentalNumber","options","scale","ticks","beginAtZero","legend","responsive","maintainAspectRatio","animation","cutoutPercentage","layout","tooltips","mode","borderWidth","propTypes","string","mapStateToProps","CurrentKeyword","SentimentalLabel","mapDispatchToProps","dispatch","SentimentalData"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Radar } from 'react-chartjs-2';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport ApiService from \"ApiService\";\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    IconButton,\r\n    Divider,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { connect } from 'react-redux';\r\nimport productStore from 'store/modules/productStore';\r\nimport { changeCurrentKeyword, changeCurrentProduct, changeSentimental } from 'store/modules/productStore';\r\nimport testData from './data';\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        height: '100%'\r\n    },\r\n    chartContainer: {\r\n        position: 'relative',\r\n        height: '300px'\r\n    },\r\n    stats: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    device: {\r\n        textAlign: 'center',\r\n        padding: theme.spacing(1)\r\n    },\r\n    deviceIcon: {\r\n        color: theme.palette.icon\r\n    }\r\n}));\r\n\r\nconst RadarChart = props => {\r\n    const { className, ...rest } = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    let titleString = props.CurrentProduct + \"'s Sentimental Analysis\";\r\n\r\n\r\n    useEffect(() => {\r\n        reloadSentimental(props.Currentnv_mid)\r\n        console.log(\"처음엔\");\r\n        changeCurrentKeyword(\"\");\r\n\r\n    }, [props.Currentnv_mid]);\r\n    //처음 실행될땐 이렇게 한다. \r\n    useEffect(() => {\r\n        reloadData();\r\n    }, [props.ReviewData])\r\n\r\n    function reloadData() {\r\n\r\n        // // let searchText = kewordReview.filter(kewordReview => kewordReview.review.indexOf(testString) >= 0);\r\n        // let searchText = props.reviewLabels.map((label => kewordReview.filter(kewordReview => kewordReview.review.indexOf(label) >= 0)));\r\n        // let count = searchText.map((q => q.length));\r\n\r\n    };\r\n    function reloadSentimental(nv_mid) {\r\n        ApiService.fetchSentimentalReview(nv_mid)\r\n            .then((res) => {\r\n                // changeReview(res.data);\r\n                console.log(\"res.data\", res.data);\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"reload error\", err);\r\n            });\r\n    };\r\n    //여기서 리뷰를 가져옴 nv_mid값을 기준으로 \r\n    const reset = () => {\r\n        changeCurrentKeyword(\"\");\r\n    }\r\n    const data = {\r\n        labels: props.reviewLabels.map(k => k.keyword),\r\n        datasets: [\r\n            {\r\n                label: props.CurrentProduct,\r\n                backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n                borderColor: 'rgb(255, 99, 132)',\r\n                PointBackgroundColor: 'rgba(255,99,132,1)',\r\n                pointBorderColor: '#fff',\r\n                pointHoverBackgroundColor: '#fff',\r\n                pointHoverBorderColor: 'rgba(255,99,132,1)',\r\n\r\n                data: props.SentimentalNumber,\r\n            },\r\n            {\r\n                label: 'My Second dataset',\r\n                backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n                borderColor: 'rgb(54, 162, 235)',\r\n                PointBackgroundColor: 'rgba(255,99,132,1)',\r\n                pointBorderColor: '#fff',\r\n                pointHoverBackgroundColor: '#fff',\r\n                pointHoverBorderColor: 'rgba(255,99,132,1)',\r\n                data: [28, 48, 40, 19, 96]\r\n            }\r\n        ]\r\n    };\r\n    const options = {\r\n        scale: {\r\n            ticks: {\r\n                beginAtZero: true,\r\n\r\n            },\r\n        },\r\n        legend: {\r\n            display: true,\r\n            position: 'top'\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        animation: false,\r\n        cutoutPercentage: 800,\r\n        layout: { padding: 4 },\r\n\r\n        tooltips: {\r\n\r\n            mode: 'index',\r\n            borderWidth: 1,\r\n\r\n        },\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <Card\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <CardHeader\r\n                action={\r\n                    <IconButton size=\"small\">\r\n                        <RefreshIcon />\r\n                    </IconButton>\r\n                }\r\n                title={titleString}\r\n            />\r\n            <Divider />\r\n            <CardContent>\r\n                <Radar\r\n                    data={data}\r\n                    options={options}\r\n                    width={1000}\r\n                    height={400}\r\n                />\r\n            </CardContent>\r\n        </Card >\r\n    );\r\n};\r\n\r\nRadarChart.propTypes = {\r\n    className: PropTypes.string\r\n};\r\nconst mapStateToProps = ({ productStore }) => ({  //2\r\n    CurrentProduct: productStore.CurrentProduct,\r\n    CurrentKeyword: productStore.CurrentKeyword,\r\n    SentimentalLabel: productStore.SentimentalLabel,\r\n    SentimentalNumber: productStore.SentimentalNumber,\r\n    ReviewData: productStore.ReviewData,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct)),\r\n        changeCurrentKeyword: CurrentKeyword => dispatch(changeCurrentKeyword(CurrentKeyword)),\r\n        changeSentimental: SentimentalData => dispatch(changeSentimental(SentimentalData)),\r\n    }\r\n};\r\n\r\nexport default connect( // 스토어와 연결\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(RadarChart);\r\n\r\n"]},"metadata":{},"sourceType":"module"}