{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev_React\\\\project\\\\front-end\\\\src\\\\view\\\\DetailPage\\\\Sections\\\\RadarChart.js\";\nimport React, { useEffect } from 'react';\nimport { Radar } from 'react-chartjs-2';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport ApiService from \"ApiService\";\nimport { Card, CardHeader, CardContent, IconButton, Divider, Typography } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { Grid } from \"@material-ui/core\";\nimport { connect } from 'react-redux';\nimport productStore from 'store/modules/productStore';\nimport { changeCurrentKeyword, changeCurrentProduct, changeSentimentalData, changeSentimentalNumber } from 'store/modules/productStore';\nimport testData from './data';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%'\n  },\n  chartContainer: {\n    position: 'relative',\n    height: '300px'\n  },\n  stats: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  device: {\n    textAlign: 'center',\n    padding: theme.spacing(1)\n  },\n  deviceIcon: {\n    color: theme.palette.icon\n  }\n}));\n\nconst RadarChart = props => {\n  const {\n    className,\n    ...rest\n  } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  let titleString = props.CurrentProduct + \"'s Sentimental Analysis\";\n  useEffect(() => {\n    reloadSentimental(props.Currentnv_mid);\n    console.log(\"처음엔\");\n    changeCurrentKeyword(\"\");\n  }, [props.Currentnv_mid]); //처음 실행될땐 이렇게 한다. \n\n  useEffect(() => {\n    reloadData();\n  }, [props.SentimentalData]);\n\n  function reloadData() {\n    let data = props.SentimentalData;\n    let test = props.reviewLabels.map(label => label.keyword);\n    let searchText = test.map(label => data.filter(data => data.sentence.indexOf(label) >= 0));\n    let count = searchText.map(q => q.length); // 키워드가 언급된 횟수\n    // senti_score\n    // quality_score\n\n    let percentFilter = data.filter(data => data.senti_score >= 0.05 && data.quality_score >= 0.05);\n    let percentText = test.map(label => data.filter(data => data.sentence.indexOf(label) >= 0)); //let percentCount = percentFilter.map((q => q.length));\n    //const moneyFilter = replacePrice.filter(replacePrice => replacePrice.price >= minPrice && replacePrice.price < maxPrice);\n\n    props.changeSentimentalNumber(count);\n    console.log(\"sentimental count\", count);\n    console.log(\"sentimental percentCount\", percentFilter); //여기 차트에 찍을 데이터 넣는 곳 .\n  }\n\n  ;\n\n  function reloadSentimental(nv_mid) {\n    ApiService.fetchSentimentalReview(nv_mid).then(res => {\n      props.changeSentimentalData(res.data);\n      console.log(\"changeSentimentalData\", res.data);\n    }).catch(err => {\n      console.log(\"reload error\", err);\n    });\n  }\n\n  ; //여기서 리뷰를 가져옴 nv_mid값을 기준으로 \n\n  const reset = () => {\n    changeCurrentKeyword(\"\");\n  }; //console.log(\"wefwefa\", props.reviewLabels);\n\n\n  const data = {\n    labels: props.reviewLabels.map(k => k.keyword),\n    datasets: [{\n      label: props.CurrentProduct,\n      backgroundColor: 'rgba(255, 99, 132, 0.2)',\n      borderColor: 'rgb(255, 99, 132)',\n      PointBackgroundColor: 'rgba(255,99,132,1)',\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: 'rgba(255,99,132,1)',\n      data: props.SentimentalNumber\n    } // {\n    //     label: 'My Second dataset',\n    //     backgroundColor: 'rgba(54, 162, 235, 0.2)',\n    //     borderColor: 'rgb(54, 162, 235)',\n    //     PointBackgroundColor: 'rgba(255,99,132,1)',\n    //     pointBorderColor: '#fff',\n    //     pointHoverBackgroundColor: '#fff',\n    //     pointHoverBorderColor: 'rgba(255,99,132,1)',\n    //     data: [28, 48, 40, 19, 96]\n    // }\n    ]\n  };\n  const options = {\n    scale: {\n      ticks: {\n        beginAtZero: true\n      }\n    },\n    legend: {\n      display: true,\n      position: 'top'\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: false,\n    cutoutPercentage: 800,\n    layout: {\n      padding: 4\n    },\n    tooltips: {\n      mode: 'index',\n      borderWidth: 1\n    }\n  };\n  return /*#__PURE__*/React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CardHeader, {\n    action: /*#__PURE__*/React.createElement(IconButton, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(RefreshIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 25\n      }\n    })),\n    title: titleString,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Radar, {\n    data: data,\n    options: options,\n    width: 1000,\n    height: 400,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }\n  })));\n};\n\nRadarChart.propTypes = {\n  className: PropTypes.string\n};\n\nconst mapStateToProps = ({\n  productStore\n}) => ({\n  //2\n  CurrentProduct: productStore.CurrentProduct,\n  CurrentKeyword: productStore.CurrentKeyword,\n  Currentnv_mid: productStore.Currentnv_mid,\n  SentimentalLabel: productStore.SentimentalLabel,\n  SentimentalNumber: productStore.SentimentalNumber,\n  ReviewData: productStore.ReviewData,\n  reviewLabels: productStore.reviewLabels,\n  SentimentalData: productStore.SentimentalData\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct)),\n    changeCurrentKeyword: CurrentKeyword => dispatch(changeCurrentKeyword(CurrentKeyword)),\n    changeSentimentalData: SentimentalData => dispatch(changeSentimentalData(SentimentalData)),\n    changeSentimentalNumber: SentimentalNumber => dispatch(changeSentimentalNumber(SentimentalNumber))\n  };\n};\n\nexport default connect( // 스토어와 연결\nmapStateToProps, mapDispatchToProps)(RadarChart);","map":{"version":3,"sources":["C:/dev_React/project/front-end/src/view/DetailPage/Sections/RadarChart.js"],"names":["React","useEffect","Radar","clsx","PropTypes","makeStyles","useTheme","ApiService","Card","CardHeader","CardContent","IconButton","Divider","Typography","RefreshIcon","Grid","connect","productStore","changeCurrentKeyword","changeCurrentProduct","changeSentimentalData","changeSentimentalNumber","testData","useStyles","theme","root","height","chartContainer","position","stats","marginTop","spacing","display","justifyContent","device","textAlign","padding","deviceIcon","color","palette","icon","RadarChart","props","className","rest","classes","titleString","CurrentProduct","reloadSentimental","Currentnv_mid","console","log","reloadData","SentimentalData","data","test","reviewLabels","map","label","keyword","searchText","filter","sentence","indexOf","count","q","length","percentFilter","senti_score","quality_score","percentText","nv_mid","fetchSentimentalReview","then","res","catch","err","reset","labels","k","datasets","backgroundColor","borderColor","PointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","SentimentalNumber","options","scale","ticks","beginAtZero","legend","responsive","maintainAspectRatio","animation","cutoutPercentage","layout","tooltips","mode","borderWidth","propTypes","string","mapStateToProps","CurrentKeyword","SentimentalLabel","ReviewData","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Radar } from 'react-chartjs-2';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport ApiService from \"ApiService\";\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    IconButton,\r\n    Divider,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { connect } from 'react-redux';\r\nimport productStore from 'store/modules/productStore';\r\nimport { changeCurrentKeyword, changeCurrentProduct, changeSentimentalData, changeSentimentalNumber } from 'store/modules/productStore';\r\nimport testData from './data';\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        height: '100%'\r\n    },\r\n    chartContainer: {\r\n        position: 'relative',\r\n        height: '300px'\r\n    },\r\n    stats: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    device: {\r\n        textAlign: 'center',\r\n        padding: theme.spacing(1)\r\n    },\r\n    deviceIcon: {\r\n        color: theme.palette.icon\r\n    }\r\n}));\r\n\r\nconst RadarChart = props => {\r\n    const { className, ...rest } = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    let titleString = props.CurrentProduct + \"'s Sentimental Analysis\";\r\n\r\n\r\n    useEffect(() => {\r\n        reloadSentimental(props.Currentnv_mid)\r\n        console.log(\"처음엔\");\r\n        changeCurrentKeyword(\"\");\r\n\r\n    }, [props.Currentnv_mid]);\r\n    //처음 실행될땐 이렇게 한다. \r\n    useEffect(() => {\r\n        reloadData();\r\n    }, [props.SentimentalData])\r\n\r\n    function reloadData() {\r\n        let data = props.SentimentalData;\r\n        let test = props.reviewLabels.map((label => label.keyword));\r\n        let searchText = test.map((label => data.filter(data => data.sentence.indexOf(label) >= 0)));\r\n        let count = searchText.map((q => q.length));\r\n        // 키워드가 언급된 횟수\r\n        // senti_score\r\n        // quality_score\r\n        let percentFilter = data.filter((data => data.senti_score >= 0.05 && data.quality_score >= 0.05));\r\n        let percentText = test.map((label => data.filter(data => data.sentence.indexOf(label) >= 0)));\r\n        //let percentCount = percentFilter.map((q => q.length));\r\n        //const moneyFilter = replacePrice.filter(replacePrice => replacePrice.price >= minPrice && replacePrice.price < maxPrice);\r\n        props.changeSentimentalNumber(count);\r\n        console.log(\"sentimental count\", count);\r\n        console.log(\"sentimental percentCount\", percentFilter);\r\n        //여기 차트에 찍을 데이터 넣는 곳 .\r\n    };\r\n\r\n    function reloadSentimental(nv_mid) {\r\n        ApiService.fetchSentimentalReview(nv_mid)\r\n            .then((res) => {\r\n                props.changeSentimentalData(res.data);\r\n                console.log(\"changeSentimentalData\", res.data);\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"reload error\", err);\r\n            });\r\n    };\r\n    //여기서 리뷰를 가져옴 nv_mid값을 기준으로 \r\n    const reset = () => {\r\n        changeCurrentKeyword(\"\");\r\n    }\r\n    //console.log(\"wefwefa\", props.reviewLabels);\r\n    const data = {\r\n        labels: props.reviewLabels.map(k => k.keyword),\r\n        datasets: [\r\n            {\r\n                label: props.CurrentProduct,\r\n                backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n                borderColor: 'rgb(255, 99, 132)',\r\n                PointBackgroundColor: 'rgba(255,99,132,1)',\r\n                pointBorderColor: '#fff',\r\n                pointHoverBackgroundColor: '#fff',\r\n                pointHoverBorderColor: 'rgba(255,99,132,1)',\r\n\r\n                data: props.SentimentalNumber,\r\n            },\r\n            // {\r\n            //     label: 'My Second dataset',\r\n            //     backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n            //     borderColor: 'rgb(54, 162, 235)',\r\n            //     PointBackgroundColor: 'rgba(255,99,132,1)',\r\n            //     pointBorderColor: '#fff',\r\n            //     pointHoverBackgroundColor: '#fff',\r\n            //     pointHoverBorderColor: 'rgba(255,99,132,1)',\r\n            //     data: [28, 48, 40, 19, 96]\r\n            // }\r\n        ]\r\n    };\r\n    const options = {\r\n        scale: {\r\n            ticks: {\r\n                beginAtZero: true,\r\n\r\n            },\r\n        },\r\n        legend: {\r\n            display: true,\r\n            position: 'top'\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        animation: false,\r\n        cutoutPercentage: 800,\r\n        layout: { padding: 4 },\r\n\r\n        tooltips: {\r\n\r\n            mode: 'index',\r\n            borderWidth: 1,\r\n\r\n        },\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <Card\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <CardHeader\r\n                action={\r\n                    <IconButton size=\"small\">\r\n                        <RefreshIcon />\r\n                    </IconButton>\r\n                }\r\n                title={titleString}\r\n            />\r\n            <Divider />\r\n            <CardContent>\r\n                <Radar\r\n                    data={data}\r\n                    options={options}\r\n                    width={1000}\r\n                    height={400}\r\n                />\r\n            </CardContent>\r\n        </Card >\r\n    );\r\n};\r\n\r\nRadarChart.propTypes = {\r\n    className: PropTypes.string\r\n};\r\nconst mapStateToProps = ({ productStore }) => ({  //2\r\n    CurrentProduct: productStore.CurrentProduct,\r\n    CurrentKeyword: productStore.CurrentKeyword,\r\n    Currentnv_mid: productStore.Currentnv_mid,\r\n    SentimentalLabel: productStore.SentimentalLabel,\r\n    SentimentalNumber: productStore.SentimentalNumber,\r\n    ReviewData: productStore.ReviewData,\r\n    reviewLabels: productStore.reviewLabels,\r\n    SentimentalData: productStore.SentimentalData,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct)),\r\n        changeCurrentKeyword: CurrentKeyword => dispatch(changeCurrentKeyword(CurrentKeyword)),\r\n        changeSentimentalData: SentimentalData => dispatch(changeSentimentalData(SentimentalData)),\r\n        changeSentimentalNumber: SentimentalNumber => dispatch(changeSentimentalNumber(SentimentalNumber)),\r\n    }\r\n};\r\n\r\nexport default connect( // 스토어와 연결\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(RadarChart);\r\n\r\n"]},"metadata":{},"sourceType":"module"}