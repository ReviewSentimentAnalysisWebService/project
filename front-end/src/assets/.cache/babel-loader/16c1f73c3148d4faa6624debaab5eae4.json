{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev_React\\\\project\\\\front-end\\\\src\\\\components\\\\Pagination\\\\PaginationProductList.js\";\nimport React, { useState, useEffect, useSelector, useDispatch } from 'react';\nimport Posts from './Posts';\nimport PaginationPage from './PaginationPage';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport productStore from 'store/modules/productStore';\nimport { changeProductList, changeCurrentProduct, search_min, search_max } from 'store/modules/productStore';\nimport ApiService from \"ApiService\";\nimport SearchBar from 'components/Search/SearchBar';\nimport { SearchPrice } from '../Search/SearchPrice';\n\nconst PaginationProductList = props => {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(12);\n\n  const fetchPosts = () => {\n    setPosts(props.list);\n    setCurrentPage(1);\n  };\n\n  useEffect(() => {\n    fetchPosts(); //console.log(\"useEffect\", currentPage);\n    //변화를 감지하거나, 컴포넌트를 부를때 마다 실행 즉 화면이 바뀌면 한번은 실행하게된다. \n  }, [props.list]); // const replacePrice = posts.map(posts => ({ ...posts, price: posts.price.split(',').join('') }));\n  // const moneyFilter = replacePrice.filter(replacePrice => replacePrice.price >= 50000);\n  // const turn = replacePrice.map(replacePrice => ({ ...replacePrice, price: numberWithCommas(replacePrice.price) }));\n  // Get current posts\n\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const searchText = posts.filter(posts => posts.name.toLowerCase().indexOf(props.searchKeyword.toLowerCase()) >= 0); //console.log(\"test\", test);\n  // , 를 제거하는 순서 \n\n  const replacePrice = searchText.map(searchText => ({ ...searchText,\n    price: searchText.price.split(',').join('')\n  }));\n  let minPrice;\n  let maxPrice;\n\n  if (!props.SearchMin) {\n    minPrice = 0;\n  } else {\n    minPrice = parseInt(props.SearchMin);\n  }\n\n  maxPrice = parseInt(props.SearchMax);\n  console.log(\"minPrice\", minPrice); //가격을 비교하는 거 \n\n  let moneyFilter;\n\n  if (parseInt(props.SearchMax) == 0) {\n    moneyFilter = replacePrice.filter(replacePrice => replacePrice.price >= parseInt(props.SearchMin));\n  } else {\n    moneyFilter = replacePrice.filter(replacePrice => replacePrice.price >= parseInt(props.SearchMin) && replacePrice.price < parseInt(props.SearchMax));\n  } //parseInt 안하면 문자열비교함 \n\n\n  console.log(\"props.SearchMin\", props.SearchMin);\n  console.log(\"props.SearchMax\", props.SearchMax); //다시 , 찍기 \n\n  const turn = moneyFilter.map(moneyFilter => ({ ...moneyFilter,\n    price: numberWithCommas(moneyFilter.price)\n  })); // console.log(\"turn\", turn);\n\n  function numberWithCommas(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  const currentPosts = turn.slice(indexOfFirstPost, indexOfLastPost); //서치로 한번\n  //가격비교 한번\n  //후 랜더링 \n  // Change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-primary mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, \"Hello, World!\"), /*#__PURE__*/React.createElement(SearchBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SearchPrice, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Posts, {\n    posts: currentPosts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PaginationPage, {\n    postsPerPage: postsPerPage,\n    totalPosts: posts.length,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = ({\n  productStore\n}) => ({\n  //2\n  category: productStore.category,\n  list: productStore.productList,\n  CurrentProduct: productStore.CurrentProduct,\n  searchKeyword: productStore.searchKeyword,\n  SearchMin: productStore.SearchMin,\n  SearchMax: productStore.SearchMax\n}); //import store name이 맞는거다\n//props로 넣어줄 액션 생성함수\n\n\nconst mapDispatchToProps = dispatch => ({\n  changeProductList: list => dispatch(changeProductList(list)),\n  changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct)),\n  search_min: SearchMin => dispatch(search_min(SearchMin)),\n  search_max: SearchMax => dispatch(search_max(SearchMax))\n});\n\nexport default connect( // 스토어와 연결\nmapStateToProps, mapDispatchToProps)(PaginationProductList); // 흔적 \n// const t = posts.filter(posts => posts.price = parseInt(posts.price.replace(\",\", \"\")));\n// const t = posts.filter(posts => posts.price.split(',').join('') >= 0);\n// console.log(\"왜 , 가 안사라지냐\", t);\n// String.split(,).join(‘’)\n//const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n// const q = posts.map(post => post.price = parseInt(post.price.split(',').join('')));\n// console.log(\"1234123\", q);\n// const p = posts.filter(posts => posts.map(post => post.price = parseInt(post.price.split(',').join(''))) >= 1);\n// console.log(\"1234123\", p);\n// const p = posts.map(post => post.price = post.price.split(',').join(''));\n// console.log(\"1234123\", p);","map":{"version":3,"sources":["C:/dev_React/project/front-end/src/components/Pagination/PaginationProductList.js"],"names":["React","useState","useEffect","useSelector","useDispatch","Posts","PaginationPage","axios","connect","productStore","changeProductList","changeCurrentProduct","search_min","search_max","ApiService","SearchBar","SearchPrice","PaginationProductList","props","posts","setPosts","loading","setLoading","currentPage","setCurrentPage","postsPerPage","fetchPosts","list","indexOfLastPost","indexOfFirstPost","searchText","filter","name","toLowerCase","indexOf","searchKeyword","replacePrice","map","price","split","join","minPrice","maxPrice","SearchMin","parseInt","SearchMax","console","log","moneyFilter","turn","numberWithCommas","x","toString","replace","currentPosts","slice","paginate","pageNumber","length","mapStateToProps","category","productList","CurrentProduct","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useSelector, useDispatch } from 'react';\r\nimport Posts from './Posts';\r\n\r\nimport PaginationPage from './PaginationPage';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport productStore from 'store/modules/productStore';\r\nimport { changeProductList, changeCurrentProduct, search_min, search_max } from 'store/modules/productStore';\r\nimport ApiService from \"ApiService\";\r\nimport SearchBar from 'components/Search/SearchBar';\r\nimport { SearchPrice } from '../Search/SearchPrice';\r\nconst PaginationProductList = (props) => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [postsPerPage] = useState(12);\r\n  const fetchPosts = () => {\r\n    setPosts(props.list);\r\n    setCurrentPage(1);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchPosts();\r\n\r\n    //console.log(\"useEffect\", currentPage);\r\n    //변화를 감지하거나, 컴포넌트를 부를때 마다 실행 즉 화면이 바뀌면 한번은 실행하게된다. \r\n  }, [props.list]);\r\n\r\n  // const replacePrice = posts.map(posts => ({ ...posts, price: posts.price.split(',').join('') }));\r\n  // const moneyFilter = replacePrice.filter(replacePrice => replacePrice.price >= 50000);\r\n  // const turn = replacePrice.map(replacePrice => ({ ...replacePrice, price: numberWithCommas(replacePrice.price) }));\r\n\r\n  // Get current posts\r\n  const indexOfLastPost = currentPage * postsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n  const searchText = posts.filter(posts => posts.name.toLowerCase().indexOf(props.searchKeyword.toLowerCase()) >= 0);\r\n  //console.log(\"test\", test);\r\n\r\n  // , 를 제거하는 순서 \r\n  const replacePrice = searchText.map(searchText => ({ ...searchText, price: searchText.price.split(',').join('') }));\r\n\r\n  let minPrice;\r\n  let maxPrice;\r\n  if (!props.SearchMin) {\r\n    minPrice = 0;\r\n  } else {\r\n    minPrice = parseInt(props.SearchMin);\r\n  }\r\n  maxPrice = parseInt(props.SearchMax);\r\n  console.log(\"minPrice\", minPrice);\r\n\r\n\r\n  //가격을 비교하는 거 \r\n  let moneyFilter;\r\n  if (parseInt(props.SearchMax) == 0) {\r\n    moneyFilter = replacePrice.filter(replacePrice => replacePrice.price >= parseInt(props.SearchMin));\r\n  } else {\r\n    moneyFilter = replacePrice.filter(replacePrice => replacePrice.price >= parseInt(props.SearchMin) && replacePrice.price < parseInt(props.SearchMax));\r\n  }\r\n  //parseInt 안하면 문자열비교함 \r\n  console.log(\"props.SearchMin\", props.SearchMin);\r\n  console.log(\"props.SearchMax\", props.SearchMax);\r\n  //다시 , 찍기 \r\n  const turn = moneyFilter.map(moneyFilter => ({ ...moneyFilter, price: numberWithCommas(moneyFilter.price) }));\r\n  // console.log(\"turn\", turn);\r\n\r\n  function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n\r\n  const currentPosts = turn.slice(indexOfFirstPost, indexOfLastPost);\r\n  //서치로 한번\r\n  //가격비교 한번\r\n  //후 랜더링 \r\n\r\n  // Change page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (\r\n    <div className='container mt-5'>\r\n      <h1 className='text-primary mb-3'>Hello, World!</h1>\r\n      <SearchBar />\r\n      <SearchPrice />\r\n      <Posts posts={currentPosts} />\r\n      <PaginationPage\r\n        postsPerPage={postsPerPage}\r\n        totalPosts={posts.length}\r\n        paginate={paginate}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ productStore }) => ({  //2\r\n  category: productStore.category,\r\n  list: productStore.productList,\r\n  CurrentProduct: productStore.CurrentProduct,\r\n  searchKeyword: productStore.searchKeyword,\r\n  SearchMin: productStore.SearchMin,\r\n  SearchMax: productStore.SearchMax,\r\n});\r\n//import store name이 맞는거다\r\n\r\n//props로 넣어줄 액션 생성함수\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeProductList: list => dispatch(changeProductList(list)),\r\n  changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct)),\r\n  search_min: SearchMin => dispatch(search_min(SearchMin)),\r\n  search_max: SearchMax => dispatch(search_max(SearchMax)),\r\n});\r\n\r\nexport default connect( // 스토어와 연결\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(PaginationProductList);\r\n\r\n\r\n\r\n  // 흔적 \r\n  // const t = posts.filter(posts => posts.price = parseInt(posts.price.replace(\",\", \"\")));\r\n  // const t = posts.filter(posts => posts.price.split(',').join('') >= 0);\r\n  // console.log(\"왜 , 가 안사라지냐\", t);\r\n\r\n  // String.split(,).join(‘’)\r\n\r\n  //const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n  // const q = posts.map(post => post.price = parseInt(post.price.split(',').join('')));\r\n  // console.log(\"1234123\", q);\r\n\r\n\r\n  // const p = posts.filter(posts => posts.map(post => post.price = parseInt(post.price.split(',').join(''))) >= 1);\r\n  // console.log(\"1234123\", p);\r\n\r\n  // const p = posts.map(post => post.price = post.price.split(',').join(''));\r\n  // console.log(\"1234123\", p);"]},"metadata":{},"sourceType":"module"}