{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev_React\\\\project\\\\front-end\\\\src\\\\components\\\\Pagination\\\\PaginationProductList.js\";\nimport React, { useState, useEffect, useSelector } from 'react';\nimport Posts from './Posts';\nimport PaginationPage from './PaginationPage';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport productStore from 'store/modules/productStore';\nimport { changeProductList, changeCurrentProduct } from 'store/modules/productStore';\nimport ApiService from \"ApiService\";\nimport SearchBar from 'components/Search/SearchBar';\n\nconst PaginationProductList = props => {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(12);\n\n  const fetchPosts = () => {\n    setPosts(props.list);\n  };\n\n  useEffect(() => {\n    fetchPosts();\n    console.log(\"props.list\", props.list); //변화를 감지하거나, 컴포넌트를 부를때 마다 실행 즉 화면이 바뀌면 한번은 실행하게된다. \n  }, [props.list]); // Get current posts\n\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const test = posts.filter(posts => posts.name.indexOf(props.searchKeyword) >= 0); //일단 서치바로 한번 거른다음에 페이지네이션 시킨다.!!!!!!\n\n  const qwer = posts.filter(posts => posts.price(parseInt(posts.price.replace(\",\", \"\"))));\n  console.log(\"qwer\", qwer);\n  posts.map(post => {\n    const a = parseInt(post.price.replace(\",\", \"\")); // console.log(\"asdf\", a);\n  });\n  const currentPosts = test.slice(indexOfFirstPost, indexOfLastPost); //const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n  // Change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-primary mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, \"Hello, World!\"), /*#__PURE__*/React.createElement(SearchBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Posts, {\n    posts: currentPosts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PaginationPage, {\n    postsPerPage: postsPerPage,\n    totalPosts: posts.length,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = ({\n  productStore\n}) => ({\n  //2\n  category: productStore.category,\n  list: productStore.productList,\n  CurrentProduct: productStore.CurrentProduct,\n  searchKeyword: productStore.searchKeyword\n}); //import store name이 맞는거다\n//props로 넣어줄 액션 생성함수\n\n\nconst mapDispatchToProps = dispatch => ({\n  changeProductList: list => dispatch(changeProductList(list)),\n  changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct))\n});\n\nexport default connect( // 스토어와 연결\nmapStateToProps, mapDispatchToProps)(PaginationProductList);","map":{"version":3,"sources":["C:/dev_React/project/front-end/src/components/Pagination/PaginationProductList.js"],"names":["React","useState","useEffect","useSelector","Posts","PaginationPage","axios","connect","productStore","changeProductList","changeCurrentProduct","ApiService","SearchBar","PaginationProductList","props","posts","setPosts","loading","setLoading","currentPage","setCurrentPage","postsPerPage","fetchPosts","list","console","log","indexOfLastPost","indexOfFirstPost","test","filter","name","indexOf","searchKeyword","qwer","price","parseInt","replace","map","post","a","currentPosts","slice","paginate","pageNumber","length","mapStateToProps","category","productList","CurrentProduct","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useSelector } from 'react';\r\nimport Posts from './Posts';\r\n\r\nimport PaginationPage from './PaginationPage';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport productStore from 'store/modules/productStore';\r\nimport { changeProductList, changeCurrentProduct } from 'store/modules/productStore';\r\nimport ApiService from \"ApiService\";\r\nimport SearchBar from 'components/Search/SearchBar';\r\nconst PaginationProductList = (props) => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [postsPerPage] = useState(12);\r\n\r\n  const fetchPosts = () => {\r\n    setPosts(props.list);\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchPosts();\r\n\r\n    console.log(\"props.list\", props.list);\r\n    //변화를 감지하거나, 컴포넌트를 부를때 마다 실행 즉 화면이 바뀌면 한번은 실행하게된다. \r\n  }, [props.list]);\r\n\r\n\r\n\r\n  // Get current posts\r\n  const indexOfLastPost = currentPage * postsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n  const test = posts.filter(posts => posts.name.indexOf(props.searchKeyword) >= 0);\r\n  //일단 서치바로 한번 거른다음에 페이지네이션 시킨다.!!!!!!\r\n  const qwer = posts.filter(posts => posts.price(parseInt(posts.price.replace(\",\", \"\"))));\r\n  console.log(\"qwer\", qwer);\r\n  posts.map((post => {\r\n    const a = parseInt(post.price.replace(\",\", \"\"));\r\n\r\n    // console.log(\"asdf\", a);\r\n  }));\r\n\r\n  const currentPosts = test.slice(indexOfFirstPost, indexOfLastPost);\r\n  //const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n  // Change page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (\r\n    <div className='container mt-5'>\r\n      <h1 className='text-primary mb-3'>Hello, World!</h1>\r\n      <SearchBar />\r\n      <Posts posts={currentPosts} />\r\n      <PaginationPage\r\n        postsPerPage={postsPerPage}\r\n        totalPosts={posts.length}\r\n        paginate={paginate}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ productStore }) => ({  //2\r\n  category: productStore.category,\r\n  list: productStore.productList,\r\n  CurrentProduct: productStore.CurrentProduct,\r\n  searchKeyword: productStore.searchKeyword,\r\n});\r\n//import store name이 맞는거다\r\n\r\n//props로 넣어줄 액션 생성함수\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeProductList: list => dispatch(changeProductList(list)),\r\n  changeCurrentProduct: CurrentProduct => dispatch(changeCurrentProduct(CurrentProduct)),\r\n});\r\n\r\nexport default connect( // 스토어와 연결\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(PaginationProductList);"]},"metadata":{},"sourceType":"module"}